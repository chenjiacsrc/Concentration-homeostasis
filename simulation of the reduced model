tic
warning off all

% model parameters
N = 50; N0 = 0.5*N; N1 = N-N0; p = 0.5; q = 1-p; B = 1;
alpha0 = 1; alpha1 = 1; beta = 1; kappa = 2; cnb = 100; vb = log(2);
f = 0.1; T = 1/f; g = -log(p)*f; eta = 1; d = eta*f; deff = d+log(2)*f;

% other parameters
if alpha0 == alpha1
    alpha = alpha0;
    a = power(N*alpha*g/power(vb,alpha)*power(p,alpha)/(1-power(p,alpha)),1/alpha);
else
    fun = @(z)(power(power(vb,alpha0)+N0*alpha0*g/power(z,alpha0),alpha1/alpha0)...
        +N1*alpha1*g/power(z,alpha1))*power(p,alpha1)-power(vb,alpha1);
    z0 = power(N*alpha0*g/power(vb,alpha0)*power(p,alpha0)/(1-power(p,alpha0)),1/alpha0);
    a = fsolve(fun,z0);
end
a0 = power(a,alpha0); a1 = power(a,alpha1);
M0 = N0*alpha0*g/a0; M1 = N1*alpha1*g/a1;
A0 = alpha0*g/a0; A1 = alpha1*g/a1;

% sizes in all stages and transition rates between stages;
vol = zeros(1,N); rate = zeros(1,N); syn = zeros(1,N); bst = zeros(1,N);
for i = 1:N0
    vol(i) = power(power(vb,alpha0)+(i-1/2)*A0,1/alpha0);
    rate(i) = a0*power(vol(i),alpha0);
    syn(i) = 1;
    bst(i) = B*power(vol(i),beta);
end
for i = N0+1:N
    vol(i) = power(power(power(vb,alpha0)+M0,alpha1/alpha0)+(i-1/2-N0)*A1,1/alpha1);
    rate(i) = a1*power(vol(i),alpha1);
    syn(i) = kappa;
    bst(i) = B*power(vol(i),beta);
end

% distribution for stages
W00 = zeros(N); W11 = zeros(N); W22 = zeros(N);
for i = 1:N
    W00(i,i) = -rate(i); W11(i,i) = -rate(i)-d; W22(i,i) = -rate(i)-2*d;
    if i < N
        W00(i,i+1) = rate(i); W11(i,i+1) = rate(i); W22(i,i+1) = rate(i);
    end
    if i == N
        W00(i,1) = rate(N); W11(i,1) = p*rate(N); W22(i,1) = p^2*rate(N);
    end
end
W00mod = W00;
for i = 1:N
    W00mod(i,N) = 1;
end
vec = zeros(1,N); vec(N) = 1;
m0 = vec/W00mod;

% moments
S = diag(syn); M = diag(bst);
W01 = M*S; W12 = 2*M*S; W02 = 2*M^2*S;
m1 = -m0*W01/W11; 
rho = cnb/sum(m1);
m1 = -rho*m0*W01/W11;

% simulation of the paths
step = 0.05*(1+d)/rho/B; num = 1; maxtime = 1e4;
time = 0:step:maxtime; len = length(time);
stage = zeros(num,len); x = zeros(num,len); v = zeros(num,len); cctn = zeros(num,len);
cnbft = zeros(num,len); cctnft = zeros(num,len);
for k = 1:num
    % initial value
    stage(k,1) = 1; x(k,1) = floor(cnb*log(2)); v(k,1) = vb;

    % evolution
    for i = 1:len-1
        if stage(k,i) <= N0
            if flag == 0
                pB = B*power(v(k,i),beta)/(B*power(v(k,i),beta)+1); qB = 1-pB;
                tot = a0*power(v(k,i),alpha0)+d*x(k,i)+rho*pB;
            else
                pB = B/(B+1); qB = 1-pB;
                tot = a0*power(v(k,i),alpha0)+d*x(k,i)+rho*power(v(k,i),beta)*pB;
            end
            if rand < step*tot
                temp = rand;
                if temp < a0*power(v(k,i),alpha0)/tot
                    stage(k,i+1) = stage(k,i)+1; x(k,i+1) = x(k,i);
                elseif temp < (a0*power(v(k,i),alpha0)+d*x(k,i))/tot
                    stage(k,i+1) = stage(k,i); x(k,i+1) = x(k,i)-1;
                else
                    stage(k,i+1) = stage(k,i); x(k,i+1) = x(k,i)+1+geornd(qB);
                end
            else
                stage(k,i+1) = stage(k,i); x(k,i+1) = x(k,i);
            end
            v(k,i+1) = vol(stage(k,i+1));
        elseif stage(k,i) < N
            if flag == 0
                pB = B*power(v(k,i),beta)/(B*power(v(k,i),beta)+1); qB = 1-pB;
                tot = a1*power(v(k,i),alpha1)+d*x(k,i)+kappa*rho*pB;
            else
                pB = B/(B+1); qB = 1-pB;
                tot = a1*power(v(k,i),alpha1)+d*x(k,i)+kappa*rho*power(v(k,i),beta)*pB;
            end
            if rand < step*tot
                temp = rand;
                if temp < a1*power(v(k,i),alpha1)/tot
                    stage(k,i+1) = stage(k,i)+1; x(k,i+1) = x(k,i);
                elseif temp < (a1*power(v(k,i),alpha1)+d*x(k,i))/tot
                    stage(k,i+1) = stage(k,i); x(k,i+1) = x(k,i)-1;
                else
                    stage(k,i+1) = stage(k,i); x(k,i+1) = x(k,i)+1+geornd(qB);
                end  
            else
                stage(k,i+1) = stage(k,i); x(k,i+1) = x(k,i);
            end
            v(k,i+1) = vol(stage(k,i+1));
        else
            if flag == 0
                pB = B*power(v(k,i),beta)/(B*power(v(k,i),beta)+1); qB = 1-pB;
                tot = a1*power(v(k,i),alpha1)+d*x(k,i)+kappa*rho*pB;
            else
                pB = B/(B+1); qB = 1-pB;
                tot = a1*power(v(k,i),alpha1)+d*x(k,i)+kappa*rho*power(v(k,i),beta)*pB;
            end
            if rand < step*tot
                temp = rand;
                if temp < a1*power(v(k,i),alpha1)/tot
                    stage(k,i+1) = 1; x(k,i+1) = binornd(x(k,i),p);
                elseif temp < (a1*power(v(k,i),alpha1)+d*x(k,i))/tot
                    stage(k,i+1) = stage(k,i); x(k,i+1) = x(k,i)-1;
                else
                    stage(k,i+1) = stage(k,i); x(k,i+1) = x(k,i)+1+geornd(qB);
                end  
            else
                stage(k,i+1) = stage(k,i); x(k,i+1) = x(k,i);
            end
            v(k,i+1) = vol(stage(k,i+1));
        end
    end
    cctn(k,:) = x(k,:)./v(k,:);
end  

% distribution of gene product number
num = 2.4*cnb+1; prob = zeros(1,num);
for i = 1:num
    prob(i) = sum(x==i-1)/len;
end
figure; bar(0:num-1,prob,1.0); hold on

% distribution of gene product concentration
num = 100; [count,bin] = hist(cctn,num);
density = count./sum(count)./(bin(2)-bin(1));
figure; bar(bin,density,1.0); hold on

toc
